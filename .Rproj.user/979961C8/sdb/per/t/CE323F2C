{
    "contents" : "#'AEDForecasting:  \n#' Package to incorporate change point analysis in ARIMA forecasting\n#' @param myts a time series object\n#' @param  startChangePoint  a positive integer for minimum number of changepoints\n#' @param  endChangePoint  a positive integer for maximum number of change points. If 0 then  only startChangePoint number of change points will be entered. Should be either 0 or greater than startChangePoint and if so the algorithm will loop through all values inbetween subject to step\n#' @param  step  an integer to step through loop of change points\n#' @param  num Bump model number (see below)\n#' @param  cpmeth changepoint method. Default is BinSeg. See cpa package for details\n#' @param  CPpenalty default is SIC. See cpa package for details\n\n#'@return The model number, number of change points, and the information criteria values\n#'\n#' The bump models are described below. \n\ncpi <- function(myts, startChangePoint = 1, endChangePoint = 0, step = 1, num=8, cpmeth='BinSeg', CPpenalty=\"SIC\") {\n  \n  if (is.ts(myts) == FALSE) {\n    message(\"Error: First parameter must be a time series\")\n  } else if (!((startChangePoint > 0) && (startChangePoint %% 1 == 0))) {\n    message(\"Error: Starting change point must be a positive integer\")\n  } else if (!((endChangePoint > 0) && (endChangePoint %% 1 == 0)) && (endChangePoint != 0)){\n    \n    message(\"Error: Ending change point must be a positive integer\")\n  } else if ((endChangePoint <= startChangePoint) && (endChangePoint != 0)) {\n    message(\"Error: Ending change point must be greater than starting change point\")\n  } else {\n \n    DF2 <- 0\n  \n  \n    cpiP2 <- function(myts, n=startChangePoint, cpmeth.=cpmeth, CPpenalty.=CPpenalty, num.=num) {\n      \n      DF <- data.frame('Model'=rep(\"\", num), 'No.ChangePoints'=rep(n, num),\n                       'AIC' = rep(0,num),stringsAsFactors = FALSE)\n      for (k in 1:num) {\n      \n        m.bin <- suppressWarnings(changepoint::cpt.mean(myts,penalty=CPpenalty,method=cpmeth,Q=n))\n        aveTS=mean(myts)\n        temp1 <- c()\n        temp2 <- c()\n        cpiv <- matrix(0,ncol = n, nrow = length(myts))\n        for (i in 1:n) {\n          \n          for (j in 1:m.bin@cpts[i]) {\n            cpiv[j,i] <- 0 #for the ith interv var fills cpiv with 0s until the ith cpa row.\n          }\n          \n          temp1 <- length(myts) - m.bin@cpts[i]\n          \n          for (j in 1:temp1) {\n            temp2 <- j + m.bin@cpts[i]\n            if(k == 1) {\n              cpiv[temp2,i] <- 1 - (1-(log(temp2)/temp2)) \n              #DF[1,1] <- \"1 - (1 - log(changepoint/changepoint)\"\n              DF[1,1] <- \"model 1\"\n            }#model 1\n            \n            else if (k==2) {\n              cpiv[temp2,i] <- aveTS*(1 - (temp2-m.bin@cpts[i])/(1 +(temp2-m.bin@cpts[i]))) \n              DF[2,1] <- \"model 2\"\n            }#model 2\n            \n            else if (k==3) {\n              cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))\n              DF[3,1] <- \"model 3\"\n            } #model 3\n            \n            else if (k==4) {\n              cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))\n              DF[4,1] <- \"model 4\"\n            } #model 4\n            \n            else if (k==5) {\n              cpiv[temp2,i] <- aveTS*exp(-((temp2-m.bin@cpts[i])^2)/((length(myts)^2)*2.5))\n              DF[5,1] <- \"model 5\"\n            } #model 5\n            \n            else if (k==6) {\n              cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))\n              DF[6,1] <- \"model 6\"\n            } #model 6\n            \n            else if (k==7) {\n              cpiv[temp2,i] <- 1 - (1-(1/log(temp2)))\n              DF[7,1] <- \"model 7\"\n            } #model 7\n            \n            else if (k==8) {\n              cpiv[temp2,i] <- 1\n              DF[8,1] <- \"model 8\"\n            } \n          }\n        }\n        xxx=suppressWarnings(forecast::auto.arima(myts,xreg = cpiv))\n        #message=paste(n,k, sep=\"  \")\n        #print(message)\n        #print(xxx$aic)\n        DF[k,3] <- xxx$aic\n      }\n    \n    return(DF)\n    }\n    \n    suppressWarnings(if (endChangePoint == 0) {\n      DF2 <- cpiP2(myts)\n    } else {\n      for (z in seq(startChangePoint,endChangePoint,step)) {\n        if (DF2 == 0) {\n          DF2 <- cpiP2(myts,n=z)\n        } else {\n          DFtemp <- cpiP2(myts,n=z)\n          DF2 <- merge(DF2, DFtemp, all = TRUE)\n        }\n      }\n    })\n    \n    return(DF2)\n  }\n}\n",
    "created" : 1437391915195.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1633611662",
    "id" : "CE323F2C",
    "lastKnownWriteTime" : 1437391939,
    "path" : "~/Documents/R/AEDForecast/R/cpi.R",
    "project_path" : "R/cpi.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}