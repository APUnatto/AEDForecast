install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
setwd("..")
install("AEDForecast")
library(AEDForecast)
?cpi
getwd()
install.packages("forecast")
library(forecast)
test <- read.csv("test.csv")
head(test)
test <- test[,1:4]
head(test)
test2 <- test[,1:2]
testTs <- ts(test2)
head(testTs)
?ts
ts <- ts(test2[,2])
head(ts)
auto.arima(ts)
plot(auto.arima(ts))
y <- auto.arima(ts)
plot(forecast(y,h=20))
points(1:length(x),fitted(y),type="l",col="green")
points(1:length(ts),fitted(y),type="l",col="green")
plot(forecast(y,h=5))
plot(forecast(y[,200:226],h=5))
y
tail(y)
plot(forecast(y$x[,200:226],h=5))
?plot
?forecast
y
#'AEDForecasting:
#' Package to incorporate change point analysis in ARIMA forecasting
#' @param myts a time series object
#' @param  startChangePoint  a positive integer for minimum number of changepoints
#' @param  endChangePoint  a positive integer for maximum number of change points. If 0 then  only startChangePoint number of change points will be entered. Should be either 0 or greater than startChangePoint and if so the algorithm will loop through all values inbetween subject to step
#' @param  step  an integer to step through loop of change points
#' @param  num Bump model number (see below)
#' @param  cpmeth changepoint method. Default is BinSeg. See cpa package for details
#' @param  CPpenalty default is SIC. See cpa package for details
#'@return The model number, number of change points, and the information criteria values
#'
#' The bump models are described below.
cpi <- function(myts, startChangePoint = 1, endChangePoint = 0, step = 1, num=8, cpmeth='BinSeg', CPpenalty="SIC") {
if (is.ts(myts) == FALSE) {
message("Error: First parameter must be a time series")
} else if (!((startChangePoint > 0) && (startChangePoint %% 1 == 0))) {
message("Error: Starting change point must be a positive integer")
} else if (!((endChangePoint > 0) && (endChangePoint %% 1 == 0)) && (endChangePoint != 0)){
message("Error: Ending change point must be a positive integer")
} else if ((endChangePoint <= startChangePoint) && (endChangePoint != 0)) {
message("Error: Ending change point must be greater than starting change point")
} else {
DF2 <- 0
cpiP2 <- function(myts, n=startChangePoint, cpmeth.=cpmeth, CPpenalty.=CPpenalty, num.=num) {
DF <- data.frame('Model'=rep("", num), 'No.ChangePoints'=rep(n, num),
'AIC' = rep(0,num),stringsAsFactors = FALSE)
for (k in 1:num) {
m.bin <- suppressWarnings(changepoint::cpt.mean(myts,penalty=CPpenalty,method=cpmeth,Q=n))
aveTS=mean(myts)
temp1 <- c()
temp2 <- c()
cpiv <- matrix(0,ncol = n, nrow = length(myts))
for (i in 1:n) {
for (j in 1:m.bin@cpts[i]) {
cpiv[j,i] <- 0 #for the ith interv var fills cpiv with 0s until the ith cpa row.
}
temp1 <- length(myts) - m.bin@cpts[i]
for (j in 1:temp1) {
temp2 <- j + m.bin@cpts[i]
if(k == 1) {
cpiv[temp2,i] <- 1 - (1-(log(temp2)/temp2))
#DF[1,1] <- "1 - (1 - log(changepoint/changepoint)"
DF[1,1] <- "model 1"
}#model 1
else if (k==2) {
cpiv[temp2,i] <- aveTS*(1 - (temp2-m.bin@cpts[i])/(1 +(temp2-m.bin@cpts[i])))
DF[2,1] <- "model 2"
}#model 2
else if (k==3) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[3,1] <- "model 3"
} #model 3
else if (k==4) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[4,1] <- "model 4"
} #model 4
else if (k==5) {
cpiv[temp2,i] <- aveTS*exp(-((temp2-m.bin@cpts[i])^2)/((length(myts)^2)*2.5))
DF[5,1] <- "model 5"
} #model 5
else if (k==6) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[6,1] <- "model 6"
} #model 6
else if (k==7) {
cpiv[temp2,i] <- 1 - (1-(1/log(temp2)))
DF[7,1] <- "model 7"
} #model 7
else if (k==8) {
cpiv[temp2,i] <- 1
DF[8,1] <- "model 8"
}
}
}
xxx=suppressWarnings(forecast::auto.arima(myts,xreg = cpiv))
#message=paste(n,k, sep="  ")
#print(message)
#print(xxx$aic)
DF[k,3] <- xxx$aic
}
return(DF)
}
suppressWarnings(if (endChangePoint == 0) {
DF2 <- cpiP2(myts)
} else {
for (z in seq(startChangePoint,endChangePoint,step)) {
if (DF2 == 0) {
DF2 <- cpiP2(myts,n=z)
} else {
DFtemp <- cpiP2(myts,n=z)
DF2 <- merge(DF2, DFtemp, all = TRUE)
}
}
})
return(DF2)
}
}
cpi(ts)
ts
ts <- ts(Test2[,2],na.rm = TRUE)
#test data
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
ER <- 100 - UNRATENSA # convert to employment rate
dimnames(ER)[2] <- "ER"
chartSeries(ER,theme="white")
ER.data.frame <- as.data.frame(ER)
ER.data.frame$date <- ymd(rownames(ER.data.frame))
ER.time.series <- ts(ER.data.frame$ER,
start = c(year(min(ER.data.frame$date)),month(min(ER.data.frame$date))),
end = c(year(max(ER.data.frame$date)),month(max(ER.data.frame$date))),
frequency=12)
test <- ER.time.series
#Test the function
cpi(test)
a <- cpi(test,1,5,2)
a[order(a$AIC),]
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
install.packages("quantmod","lubridate")
install.packages("quantmod", "lubridate")
#test data
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
ER <- 100 - UNRATENSA # convert to employment rate
dimnames(ER)[2] <- "ER"
chartSeries(ER,theme="white")
ER.data.frame <- as.data.frame(ER)
ER.data.frame$date <- ymd(rownames(ER.data.frame))
ER.time.series <- ts(ER.data.frame$ER,
start = c(year(min(ER.data.frame$date)),month(min(ER.data.frame$date))),
end = c(year(max(ER.data.frame$date)),month(max(ER.data.frame$date))),
frequency=12)
test <- ER.time.series
#Test the function
cpi(test)
a <- cpi(test,1,5,2)
a[order(a$AIC),]
#test data
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
ER <- 100 - UNRATENSA # convert to employment rate
dimnames(ER)[2] <- "ER"
chartSeries(ER,theme="white")
ER.data.frame <- as.data.frame(ER)
ER.data.frame$date <- ymd(rownames(ER.data.frame))
ER.time.series <- ts(ER.data.frame$ER,
start = c(year(min(ER.data.frame$date)),month(min(ER.data.frame$date))),
end = c(year(max(ER.data.frame$date)),month(max(ER.data.frame$date))),
frequency=12)
test <- ER.time.series
#Test the function
cpi(test)
a <- cpi(test,1,5,2)
a[order(a$AIC),]
#test data
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
ER <- 100 - UNRATENSA # convert to employment rate
dimnames(ER)[2] <- "ER"
chartSeries(ER,theme="white")
ER.data.frame <- as.data.frame(ER)
ER.data.frame$date <- ymd(rownames(ER.data.frame))
ER.time.series <- ts(ER.data.frame$ER,
start = c(year(min(ER.data.frame$date)),month(min(ER.data.frame$date))),
end = c(year(max(ER.data.frame$date)),month(max(ER.data.frame$date))),
frequency=12)
test <- ER.time.series
#Test the function
cpi(test)
a <- cpi(test,1,5,2)
a[order(a$AIC),]
?cpi
install("AEDForecast")
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
install.packages("devtools")
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
install("AEDForecast")
getwd()
setwd("..")
install("AEDForecast")
?cpi
library(cpi)
?cpi
detach("package:cpi",unload=TRUE)
?cpi
library(AEDForecast)
?cpi
source('~/Documents/R/AEDForecast/R/cpi.R')
#'AEDForecasting:
#' Package to incorporate change point analysis in ARIMA forecasting
#' @param myts a time series object
#' @param  startChangePoint  a positive integer for minimum number of changepoints
#' @param  endChangePoint  a positive integer for maximum number of change points. If 0 then  only startChangePoint number of change points will be entered. Should be either 0 or greater than startChangePoint and if so the algorithm will loop through all values inbetween subject to step
#' @param  step  an integer to step through loop of change points
#' @param  num Bump model number (see below)
#' @param  cpmeth changepoint method. Default is BinSeg. See cpa package for details
#' @param  CPpenalty default is SIC. See cpa package for details
#'@return The model number, number of change points, and the information criteria values
#'
#' The bump models are described below.
cpi <- function(myts, startChangePoint = 1, endChangePoint = 0, step = 1, num=8, cpmeth='BinSeg', CPpenalty="SIC") {
if (is.ts(myts) == FALSE) {
message("Error: First parameter must be a time series")
} else if (!((startChangePoint > 0) && (startChangePoint %% 1 == 0))) {
message("Error: Starting change point must be a positive integer")
} else if (!((endChangePoint > 0) && (endChangePoint %% 1 == 0)) && (endChangePoint != 0)){
message("Error: Ending change point must be a positive integer")
} else if ((endChangePoint <= startChangePoint) && (endChangePoint != 0)) {
message("Error: Ending change point must be greater than starting change point")
} else {
DF2 <- 0
cpiP2 <- function(myts, n=startChangePoint, cpmeth.=cpmeth, CPpenalty.=CPpenalty, num.=num) {
DF <- data.frame('Model'=rep("", num), 'No.ChangePoints'=rep(n, num),
'AIC' = rep(0,num),stringsAsFactors = FALSE)
for (k in 1:num) {
m.bin <- suppressWarnings(changepoint::cpt.mean(myts,penalty=CPpenalty,method=cpmeth,Q=n))
aveTS=mean(myts)
temp1 <- c()
temp2 <- c()
cpiv <- matrix(0,ncol = n, nrow = length(myts))
for (i in 1:n) {
for (j in 1:m.bin@cpts[i]) {
cpiv[j,i] <- 0 #for the ith interv var fills cpiv with 0s until the ith cpa row.
}
temp1 <- length(myts) - m.bin@cpts[i]
for (j in 1:temp1) {
temp2 <- j + m.bin@cpts[i]
if(k == 1) {
cpiv[temp2,i] <- 1 - (1-(log(temp2)/temp2))
#DF[1,1] <- "1 - (1 - log(changepoint/changepoint)"
DF[1,1] <- "model 1"
}#model 1
else if (k==2) {
cpiv[temp2,i] <- aveTS*(1 - (temp2-m.bin@cpts[i])/(1 +(temp2-m.bin@cpts[i])))
DF[2,1] <- "model 2"
}#model 2
else if (k==3) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[3,1] <- "model 3"
} #model 3
else if (k==4) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[4,1] <- "model 4"
} #model 4
else if (k==5) {
cpiv[temp2,i] <- aveTS*exp(-((temp2-m.bin@cpts[i])^2)/((length(myts)^2)*2.5))
DF[5,1] <- "model 5"
} #model 5
else if (k==6) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[6,1] <- "model 6"
} #model 6
else if (k==7) {
cpiv[temp2,i] <- 1 - (1-(1/log(temp2)))
DF[7,1] <- "model 7"
} #model 7
else if (k==8) {
cpiv[temp2,i] <- 1
DF[8,1] <- "model 8"
}
}
}
xxx=suppressWarnings(forecast::auto.arima(myts,xreg = cpiv))
#message=paste(n,k, sep="  ")
#print(message)
#print(xxx$aic)
DF[k,3] <- xxx$aic
}
return(DF)
}
suppressWarnings(if (endChangePoint == 0) {
DF2 <- cpiP2(myts)
} else {
for (z in seq(startChangePoint,endChangePoint,step)) {
if (DF2 == 0) {
DF2 <- cpiP2(myts,n=z)
} else {
DFtemp <- cpiP2(myts,n=z)
DF2 <- merge(DF2, DFtemp, all = TRUE)
}
}
})
return(DF2)
}
}
#test data
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts")
ER <- 100 - UNRATENSA # convert to employment rate
dimnames(ER)[2] <- "ER"
chartSeries(ER,theme="white")
ER.data.frame <- as.data.frame(ER)
ER.data.frame$date <- ymd(rownames(ER.data.frame))
ER.time.series <- ts(ER.data.frame$ER,
start = c(year(min(ER.data.frame$date)),month(min(ER.data.frame$date))),
end = c(year(max(ER.data.frame$date)),month(max(ER.data.frame$date))),
frequency=12)
test <- ER.time.series
#Test the function
cpi(test)
a <- cpi(test,1,5,2)
a[order(a$AIC),]
getSymbols("UNRATENSA", src="FRED", return.class = "xts", auto.asign = TRUE)
?getSymbols
getSymbols("UNRATENSA", src="FRED", return.class = "xts", auto.asign = TRUE, env=parent.frame())
getSymbols("UNRATENSA", src="FRED")
getSymbols("UNRATENSA", src="csv")
getSymbols("UNRATENSA", src="FRED")
getSymbols("^GSPC", env = sp500, src = "yahoo",
+ from = as.Date("1960-01-04"), to = as.Date("2009-01-01"))
getSymbols("^GSPC", env = sp500, src = "yahoo", from = as.Date("1960-01-04"), to = as.Date("2009-01-01"))
getSymbols("^GSPC",  src = "yahoo", from = as.Date("1960-01-04"), to = as.Date("2009-01-01"))
GSPC
head(GSPC)
getSymbols ("UNRATENSA", src="FRED", return. class = "xts")
getSymbols ("UNRATENSA", src="FRED", return.class = "xts")
getSymbols ("CPIAUCNS", src="FRED", return.class = "xts")
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts", auto.asign = TRUE, env=parent.frame())
remove.packages("quantmod")
remove.packages("lubridate")
remove.packages("lubridate")
install.packages("quantmod","lubridate")
install.packages("quantmod", "lubridate")
install.packages("quantmod", "lubridate")
library(quantmod) # use for gathering and charting economic data
library(lubridate) # date functions
par(mfrow = c(2,2)) # four plots on one window/page
# Economic Data from Federal Reserve Bank of St. Louis (FRED system)
# National Civilian Unemployment Rate (monthly, percentage)
getSymbols("UNRATENSA", src="FRED", return.class = "xts", auto.asign = TRUE, env=parent.frame())
myts <- ts(rnorm(2190,mean=10,sd=3), start=c(2009, 1),
end=c(2014, 12), frequency=12)
#'AEDForecasting:
#' Package to incorporate change point analysis in ARIMA forecasting
#' @param myts a time series object
#' @param  startChangePoint  a positive integer for minimum number of changepoints
#' @param  endChangePoint  a positive integer for maximum number of change points. If 0 then  only startChangePoint number of change points will be entered. Should be either 0 or greater than startChangePoint and if so the algorithm will loop through all values inbetween subject to step
#' @param  step  an integer to step through loop of change points
#' @param  num Bump model number (see below)
#' @param  cpmeth changepoint method. Default is BinSeg. See cpa package for details
#' @param  CPpenalty default is SIC. See cpa package for details
#'@return The model number, number of change points, and the information criteria values
#'
#' The bump models are described below.
cpi <- function(myts, startChangePoint = 1, endChangePoint = 0, step = 1, num=8, cpmeth='BinSeg', CPpenalty="SIC") {
if (is.ts(myts) == FALSE) {
message("Error: First parameter must be a time series")
} else if (!((startChangePoint > 0) && (startChangePoint %% 1 == 0))) {
message("Error: Starting change point must be a positive integer")
} else if (!((endChangePoint > 0) && (endChangePoint %% 1 == 0)) && (endChangePoint != 0)){
message("Error: Ending change point must be a positive integer")
} else if ((endChangePoint <= startChangePoint) && (endChangePoint != 0)) {
message("Error: Ending change point must be greater than starting change point")
} else {
DF2 <- 0
cpiP2 <- function(myts, n=startChangePoint, cpmeth.=cpmeth, CPpenalty.=CPpenalty, num.=num) {
DF <- data.frame('Model'=rep("", num), 'No.ChangePoints'=rep(n, num),
'AIC' = rep(0,num),stringsAsFactors = FALSE)
for (k in 1:num) {
m.bin <- suppressWarnings(changepoint::cpt.mean(myts,penalty=CPpenalty,method=cpmeth,Q=n))
aveTS=mean(myts)
temp1 <- c()
temp2 <- c()
cpiv <- matrix(0,ncol = n, nrow = length(myts))
for (i in 1:n) {
for (j in 1:m.bin@cpts[i]) {
cpiv[j,i] <- 0 #for the ith interv var fills cpiv with 0s until the ith cpa row.
}
temp1 <- length(myts) - m.bin@cpts[i]
for (j in 1:temp1) {
temp2 <- j + m.bin@cpts[i]
if(k == 1) {
cpiv[temp2,i] <- 1 - (1-(log(temp2)/temp2))
#DF[1,1] <- "1 - (1 - log(changepoint/changepoint)"
DF[1,1] <- "model 1"
}#model 1
else if (k==2) {
cpiv[temp2,i] <- aveTS*(1 - (temp2-m.bin@cpts[i])/(1 +(temp2-m.bin@cpts[i])))
DF[2,1] <- "model 2"
}#model 2
else if (k==3) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[3,1] <- "model 3"
} #model 3
else if (k==4) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[4,1] <- "model 4"
} #model 4
else if (k==5) {
cpiv[temp2,i] <- aveTS*exp(-((temp2-m.bin@cpts[i])^2)/((length(myts)^2)*2.5))
DF[5,1] <- "model 5"
} #model 5
else if (k==6) {
cpiv[temp2,i] <- aveTS*(1-(1 /(temp2-m.bin@cpts[i])))
DF[6,1] <- "model 6"
} #model 6
else if (k==7) {
cpiv[temp2,i] <- 1 - (1-(1/log(temp2)))
DF[7,1] <- "model 7"
} #model 7
else if (k==8) {
cpiv[temp2,i] <- 1
DF[8,1] <- "model 8"
}
}
}
xxx=suppressWarnings(forecast::auto.arima(myts,xreg = cpiv))
#message=paste(n,k, sep="  ")
#print(message)
#print(xxx$aic)
DF[k,3] <- xxx$aic
}
return(DF)
}
suppressWarnings(if (endChangePoint == 0) {
DF2 <- cpiP2(myts)
} else {
for (z in seq(startChangePoint,endChangePoint,step)) {
if (DF2 == 0) {
DF2 <- cpiP2(myts,n=z)
} else {
DFtemp <- cpiP2(myts,n=z)
DF2 <- merge(DF2, DFtemp, all = TRUE)
}
}
})
return(DF2)
}
}
cpi(myts)
cpi(myts,1,4)
cpi(myts,1,4,2)
